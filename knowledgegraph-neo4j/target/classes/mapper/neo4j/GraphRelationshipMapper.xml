<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.knowledgegraph.neo4j.mapper.GraphRelationshipMapper">
    
    <resultMap type="GraphRelationship" id="GraphRelationshipResult">
        <result property="graphRelationshipId"    column="graph_relationship_id"    />
        <result property="graphKey"    column="graph_key"    />
        <result property="graphRelationshipName"    column="graph_relationship_name"    />
        <result property="graphRelationshipFrom"    column="graph_relationship_from"    />
        <result property="graphRelationshipFromName"    column="graph_relationship_from_name"    />
        <result property="graphRelationshipTo"    column="graph_relationship_to"    />
        <result property="graphRelationshipToName"    column="graph_relationship_to_name"    />
    </resultMap>


    <select id="selectGraphRelationshipList" parameterType="GraphRelationship" resultMap="GraphRelationshipResult">
        MATCH (n:${graphKey})-[r]->(b)
            <where>
                <if test="graphRelationshipName != null  and graphRelationshipName != ''"> and r.name =~ ('.*'+ &apos;${graphRelationshipName}&apos; +'.*')</if>
                <if test="graphRelationshipFrom != null "> and id(n)  = ${graphRelationshipFrom}</if>
                <if test="graphRelationshipFromName != null  and graphRelationshipFromName != ''"> and n.name =~ ('.*'+ &apos;${graphRelationshipFromName}&apos; + '.*')</if>
                <if test="graphRelationshipTo != null "> and id(b) = ${graphRelationshipTo}</if>
                <if test="graphRelationshipToName != null  and graphRelationshipToName != ''"> and b.name =~ ('.*'+ &apos;${graphRelationshipToName}&apos; +'.*')</if>
            </where>
        return  &apos;${graphKey}&apos; as graph_key,
                id(r) as graph_relationship_id,
                r.name as graph_relationship_name ,
                id(n) as graph_relationship_from ,
                n.name as graph_relationship_from_name,
                id(b) as graph_relationship_to ,
                b.name as graph_relationship_to_name
        <if test="limitFlag != null  and limitFlag != ''"> SKIP ${skip} LIMIT ${pageSizeNeo4j} </if>
    </select>
    <select id="selectGraphRelationshipListTotal" parameterType="GraphRelationship" resultType="int">
        MATCH (n:${graphKey})-[r]->(b)
            <where>
                <if test="graphRelationshipName != null  and graphRelationshipName != ''"> and r.name =~ ('.*'+ &apos;${graphRelationshipName}&apos; +'.*')</if>
                <if test="graphRelationshipFrom != null "> and id(n)  = ${graphRelationshipFrom}</if>
                <if test="graphRelationshipFromName != null  and graphRelationshipFromName != ''"> and n.name =~ ('.*'+ &apos;${graphRelationshipFromName}&apos; + '.*')</if>
                <if test="graphRelationshipTo != null "> and id(b) = ${graphRelationshipTo}</if>
                <if test="graphRelationshipToName != null  and graphRelationshipToName != ''"> and b.name =~ ('.*'+ &apos;${graphRelationshipToName}&apos; +'.*')</if>
            </where>
        RETURN  COUNT(*)
    </select>

    <select id="selectGraphRelationshipByGraphRelationshipId" parameterType="Long" resultMap="GraphRelationshipResult">
        MATCH (n)-[r]->(b)
        <where>
            <if test="graphRelationshipId != null and graphRelationshipId != ''"> and id(r)  = ${graphRelationshipId}</if>
        </where>
        return  id(r) as graph_relationship_id,
        r.name as graph_relationship_name ,
        id(n) as graph_relationship_from ,
        n.name as graph_relationship_from_name,
        id(b) as graph_relationship_to ,
        b.name as graph_relationship_to_name
    </select>

    <select id="insertGraphRelationship" parameterType="GraphRelationship" resultType="int">
        MATCH (f:${graphKey}) ,(t:${graphKey})
                WHERE id(f) = ${graphRelationshipFrom}  and id(t) =  ${graphRelationshipTo}
                CREATE (f)-[r:${graphKey}{name:&apos;${graphRelationshipName}&apos; }]->(t)
                RETURN id(r)
    </select>

    <select id="updateGraphRelationship" parameterType="GraphRelationship" resultType="int">
        MATCH (n)-[r:${graphKey}]->(b)
            where id(r) = ${graphRelationshipId}
             set r.name = &apos;${graphRelationshipName}&apos;
            return count(*)
    </select>

    <select id="deleteGraphRelationshipByGraphRelationshipId" parameterType="Long" >
        MATCH (n)-[r]->()
             where  id(r) = ${graphRelationshipId}
            delete r
    </select>


    <select id="deleteGraphRelationshipByGraphRelationshipIds" parameterType="String">
        MATCH (n)-[r]->() where  id(r) in
        <foreach item="graphRelationshipId" collection="array" open="[" separator="," close="]">
            ${graphRelationshipId}
        </foreach>
        delete r
    </select>
</mapper>